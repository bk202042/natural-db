### Goal
Ship an MVP “Real Estate CS bot” on top of this repo focused on:
- Scheduling: recurring fee reminders (electricity, management, water)
- Documents: contract/invoice ingestion, parsing, and retrieval

### Scope and Constraints (MVP)
- Input channel: Telegram only (existing pipeline)
- Data types: fee schedules (monthly), documents as pasted text or URL (defer Telegram file attachments to v0.1)
- No external real estate APIs yet
- Keep changes minimal; reuse existing tools (schedule_prompt, execute_sql) and patterns

### Architecture Fit
- Use `natural-db` as orchestrator with a small domain layer for “Fees” and “Documents”
- Store domain data in `memories` schema via `execute_sql`
- Use `schedule_prompt` to drive recurring reminders via `pg_cron` + `pg_net`
- Deliver reminders via `telegram-outgoing`

### Data Model (new tables in `memories`)
Add one migration (e.g., `20250808_add_realestate_mvp.sql`):
- memories.fees
  - id UUID PK, chat_id TEXT, fee_type TEXT CHECK IN ('electricity','management','water','other')
  - amount NUMERIC NULL, currency TEXT NULL
  - due_day SMALLINT NOT NULL CHECK (due_day BETWEEN 1 AND 31)
  - note TEXT NULL
  - is_active BOOLEAN DEFAULT true
  - created_at, updated_at
- memories.fee_jobs
  - id UUID PK, fee_id UUID FK → memories.fees(id)
  - cron_job_name TEXT UNIQUE NOT NULL
  - cron_expression TEXT NOT NULL
  - timezone TEXT NULL
  - created_at
- memories.documents
  - id UUID PK, chat_id TEXT, doc_type TEXT CHECK IN ('contract','invoice','other')
  - source_kind TEXT CHECK IN ('text','url') NOT NULL
  - source_value TEXT NOT NULL
  - parsed JSONB NULL  -- extracted fields (amount, parties, dates, etc.)
  - created_at

Notes:
- Use `execute_sql` to CRUD these tables (LLM confined to `memories`).
- Keep everything per `chat_id` to align with membership and delivery paths.

### Tools (extensions in `supabase/functions/natural-db/tools.ts`)
Add domain-specific tools (wrap the existing `executeRestrictedSQL`/`executePrivilegedSQL`):
- fees_create
  - input: fee_type, due_day, amount?, currency?, note?
  - behavior: insert into `memories.fees`; compute a monthly cron expression in UTC (or store tz) and create a job in `pg_cron` via `schedule_prompt` with job_name `cron_{chatId}_fee_{feeId}`; persist job meta into `memories.fee_jobs`
- fees_list_active
  - input: none
  - behavior: SELECT active fees for chat
- fees_cancel
  - input: fee_id
  - behavior: mark fee inactive; unschedule corresponding cron via `unschedule_prompt`; update `memories.fee_jobs`
- docs_store
  - input: doc_type, source_kind ('text'|'url'), source_value
  - behavior: insert into `memories.documents`
- docs_parse
  - input: document_id
  - behavior (MVP): call OpenAI to extract structured fields per doc_type and update `parsed`; if offline, fallback: store a summary text in `parsed.summary`

Use existing `schedule_prompt` to fire a standard “fee reminder” payload monthly. For MVP simplicity, schedule a monthly cron at 09:00 local (use stored tz if available; else default UTC).

### Orchestrator Logic (lightweight additions in `natural-db/index.ts`)
- Add intent routes (prompt patterns) for:
  - Fee CRUD: “remind me to pay electricity on the 15th”, “cancel water reminder”, “list my fees”
  - Documents: “store this invoice”, “parse the last contract”, “what’s the amount due on the invoice?”
- Expose new tools to the AI model (compose them alongside existing tools)
- Scheduled callbacks:
  - When `incomingMessageRole === 'system_routine_task'` and payload indicates fee reminder, generate concise text using the fee record and send to `telegram-outgoing` (do not require extra DB writes except optional logging in `public.messages`)

### Scheduling Strategy
- On fees_create:
  - Compute cron from `due_day` (e.g., `0 9 {due_day} * *` at 09:00; adjust to UTC hours if timezone is known)
  - Use existing `schedule_prompt` with a standard prompt body:
    - userPrompt: “Send a fee reminder for fee_id=X and chat_id=Y”
    - incomingMessageRole: “system_routine_task”
    - callbackUrl: existing `telegram-outgoing` URL (through natural-db first to format text)
- On cron fire:
  - `natural-db` recognizes “fee reminder” task and formats a message like:
    - “Reminder: Your {fee_type} fee is due today. {amount currency}[note]”

### Telegram UX (MVP)
- Natural language only (no new commands required)
- Examples the bot should handle:
  - “Remind me to pay electricity on the 15th every month”
  - “List my fee reminders”
  - “Cancel the management fee reminder”
  - “Here is an invoice text: …” (store + parse)
  - “What’s the total and due date on that invoice?”
- Error/edge:
  - Missing timezone: existing onboarding flow handles it
  - Invalid day: respond with a friendly correction request
  - Duplicate fee type/day: allow multiple or merge based on simple heuristic

### Acceptance Tests
- Fees:
  - Create fee reminder → record appears in `memories.fees` and a cron job is scheduled; monthly POST fires and a Telegram message is delivered
  - List fees → shows what was added
  - Cancel fee → deactivates and unschedules job
- Documents:
  - Store document text → `memories.documents` row present
  - Parse document → `parsed` JSONB contains at least {amount?, currency?, parties?, dates?} or a `summary`
  - Answer questions using parsed fields

### Migration Plan
1) Add migration for `memories.fees`, `memories.fee_jobs`, `memories.documents`
2) Extend `tools.ts` with fees_*, docs_* tools (reuse `executeRestrictedSQL`/`PrivilegedSQL` + existing schedule/unschedule)
3) Wire tools into `natural-db` model call (add to tools map)
4) Handle `system_routine_task` for fee reminders (message formatting + callback)
5) Update `ARCHITECTURE.md` and `docs/learning-guide.md` with MVP domain section

### Later (v0.1+)
- Telegram document attachments: handle `document` and `photo` in `telegram-input`, fetch content via Telegram `getFile`, add OCR/PDF parsing, pass bytes/URL to OpenAI
- Recurrence customization (e.g., bi-monthly, different times)
- Payment tracking: mark paid, snooze, overdue roll-ups
- Basic dashboards/exports

### Risks and Mitigations
- Timezone drift: store tz on fee creation; compute cron in UTC-accurate way; document limitations
- OpenAI parsing variability: keep schema minimal; provide few-shot hints; store raw text for re-parse
- Cron limits: ensure unique job names; guard unschedule on delete

### Work Breakdown (1–2 weeks)
- Day 1–2: Migration + tools scaffolding (fees_*, docs_*) and tests with `execute_sql`
- Day 3–4: Orchestrator intent routing + scheduled reminder handling; E2E test (manual)
- Day 5: Document parse tool using OpenAI; minimal extraction schema; tests
- Day 6: Copy updates to docs; happy-path user testing
- Buffer: Hardening, error copy, small UX tweaks

This plan keeps the MVP lean by reusing the existing scheduling pipeline and tool framework, adding minimal domain-specific tables and tools to cover fee reminders and basic document handling.

### Multi-Tenancy Architecture

Your current system appears designed for single-user deployment. For real estate CS bots, you need tenant isolation and tenant-aware RLS across core tables.

```sql
-- Add tenant isolation to all tables
ALTER TABLE profiles ADD COLUMN tenant_id UUID;
ALTER TABLE chats ADD COLUMN tenant_id UUID;
ALTER TABLE messages ADD COLUMN tenant_id UUID;

-- Create tenant-specific RLS policies
CREATE POLICY "tenant_isolation" ON profiles
    USING (tenant_id = (SELECT current_setting('app.current_tenant_id')::UUID));
```
